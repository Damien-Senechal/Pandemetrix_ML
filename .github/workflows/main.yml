# .github/workflows/ci-cd-api.yml
name: Pandemetrix ML CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/covid-api

jobs:
  # Job 1: Tests unitaires et linting
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pytest-cov
    
    - name: Code formatting check
      run: |
        black --check app/ tests/ --line-length 100
    
    - name: Lint with flake8
      run: |
        flake8 app/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Unit tests (without API)
      run: |
        # Tests unitaires sur les fonctions sans lancer l'API
        python -m pytest tests/test_model.py -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  # Job 2: Build et test de l'image Docker
  docker-build-test:
    needs: code-quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create test data structure
      run: |
        mkdir -p data/raw models logs
        # Créer des fichiers de test minimaux
        echo "date,new_cases,new_deaths" > data/raw/cases_deaths.csv
        echo "2023-01-01,1000,10" >> data/raw/cases_deaths.csv
        echo "2023-01-02,1100,12" >> data/raw/cases_deaths.csv
        
        echo "date,people_vaccinated" > data/raw/vaccinations_global.csv
        echo "2023-01-01,1000000" >> data/raw/vaccinations_global.csv
        echo "2023-01-02,1010000" >> data/raw/vaccinations_global.csv
        
        echo "date,new_tests" > data/raw/testing.csv
        echo "2023-01-01,5000" >> data/raw/testing.csv
        echo "2023-01-02,5200" >> data/raw/testing.csv
        
        echo "date,daily_occupancy_hosp" > data/raw/hospital.csv
        echo "2023-01-01,500" >> data/raw/hospital.csv
        echo "2023-01-02,520" >> data/raw/hospital.csv
    
    - name: Build Docker image
      run: |
        docker build -t covid-api:test .
    
    - name: Test image can start
      run: |
        # Démarrer le container en arrière-plan
        docker run -d --name covid-api-test \
          -p 5000:5000 \
          -v $PWD/data:/app/data \
          -v $PWD/models:/app/models \
          -e FLASK_ENV=testing \
          covid-api:test
        
        # Attendre que l'API soit prête
        timeout=60
        while [ $timeout -gt 0 ]; do
          if docker exec covid-api-test curl -f http://localhost:5000/api/v1/covid/health 2>/dev/null; then
            echo "API is ready!"
            break
          fi
          echo "Waiting for API... ($timeout seconds left)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -le 0 ]; then
          echo "API failed to start"
          docker logs covid-api-test
          exit 1
        fi
    
    - name: Test basic endpoints
      run: |
        # Test health endpoint
        response=$(docker exec covid-api-test curl -s http://localhost:5000/api/v1/covid/health)
        echo "Health response: $response"
        
        # Test countries endpoint  
        response=$(docker exec covid-api-test curl -s http://localhost:5000/api/v1/covid/countries)
        echo "Countries response: $response"
    
    - name: Cleanup test container
      if: always()
      run: |
        docker stop covid-api-test || true
        docker rm covid-api-test || true

  # Job 3: Tests d'intégration API
  api-integration-tests:
    needs: docker-build-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests pytest-html pytest-timeout
    
    - name: Create enhanced test data
      run: |
        mkdir -p data/raw models logs
        
        # Données de test plus réalistes avec plusieurs pays
        cat > data/raw/cases_deaths.csv << 'EOF'
date,location,new_cases,new_deaths
2023-01-01,France,10000,100
2023-01-01,Germany,8000,80
2023-01-01,Italy,12000,120
2023-01-02,France,11000,110
2023-01-02,Germany,8500,85
2023-01-02,Italy,11500,115
EOF
        
        cat > data/raw/vaccinations_global.csv << 'EOF'
date,location,people_vaccinated
2023-01-01,France,45000000
2023-01-01,Germany,60000000
2023-01-01,Italy,40000000
2023-01-02,France,45100000
2023-01-02,Germany,60050000
2023-01-02,Italy,40080000
EOF
        
        cat > data/raw/testing.csv << 'EOF'
date,location,new_tests
2023-01-01,France,200000
2023-01-01,Germany,180000
2023-01-01,Italy,150000
2023-01-02,France,205000
2023-01-02,Germany,185000
2023-01-02,Italy,155000
EOF
        
        cat > data/raw/hospital.csv << 'EOF'
date,location,daily_occupancy_hosp
2023-01-01,France,15000
2023-01-01,Germany,12000
2023-01-01,Italy,18000
2023-01-02,France,14800
2023-01-02,Germany,11900
2023-01-02,Italy,17800
EOF
    
    - name: Start API with Docker Compose
      run: |
        # Modifier compose.yml pour les tests
        docker compose -f compose.yml up -d
        
        # Attendre que l'API soit prête avec un timeout plus long
        echo "Waiting for API to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:5001/api/v1/covid/health 2>/dev/null; then
            echo "API is ready after $((i*5)) seconds"
            break
          fi
          echo "Attempt $i/30..."
          sleep 5
        done
        
        # Vérifier si le modèle est entraîné
        echo "Checking model training status..."
        docker exec covid-prediction-api python -c "from app.models import main; main()"
    
    - name: Wait for model training
      run: |
        # Attendre que le modèle soit prêt
        for i in {1..20}; do
          response=$(curl -s http://localhost:5001/api/v1/covid/health || echo "error")
          if echo "$response" | grep -q "ready_for_predictions.*true"; then
            echo "Model is ready!"
            break
          fi
          echo "Waiting for model training... ($i/20)"
          sleep 10
        done
    
    - name: Run API Integration Tests
      run: |
        # Créer le fichier de test pour predict-batch
        cat > tests/test_batch_integration.py << 'EOF'
import pytest
import requests
import json
import time

BASE_URL = "http://localhost:5001"

class TestBatchPrediction:
    
    @pytest.fixture(autouse=True)
    def setup(self):
        # Vérifier que l'API est prête
        response = requests.get(f"{BASE_URL}/api/v1/covid/health", timeout=10)
        assert response.status_code == 200
        data = response.json()
        if not data.get('ready_for_predictions', False):
            pytest.skip("Model not ready for predictions")
    
    def test_countries_endpoint(self):
        response = requests.get(f"{BASE_URL}/api/v1/covid/countries")
        assert response.status_code == 200
        data = response.json()
        assert "countries" in data
        assert len(data["countries"]) > 0
        return data["countries"]
    
    def test_batch_prediction_basic(self):
        # Récupérer les pays disponibles
        countries_resp = requests.get(f"{BASE_URL}/api/v1/covid/countries")
        countries = countries_resp.json()["countries"]
        
        test_data = {
            "predictions": [
                {
                    "country": countries[0],
                    "date": "2023-01-15",
                    "new_cases": 10000.0,
                    "people_vaccinated": 45000000.0,
                    "new_tests": 200000.0,
                    "daily_occupancy_hosp": 15000.0
                }
            ]
        }
        
        response = requests.post(
            f"{BASE_URL}/api/v1/covid/predict-batch", 
            json=test_data,
            timeout=30
        )
        
        print(f"Response status: {response.status_code}")
        print(f"Response body: {response.text}")
        
        if response.status_code != 200:
            pytest.skip("Batch endpoint not implemented or model not ready")
        
        result = response.json()
        assert "successful_predictions" in result
        assert result["successful_predictions"] > 0
EOF
        
        # Lancer les tests
        python -m pytest tests/test_batch_integration.py -v --html=integration_report.html --tb=short
      
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Debug API logs on failure
      if: failure()
      run: |
        echo "=== API Logs ==="
        docker logs covid-prediction-api
        
        echo "=== Container Status ==="
        docker ps -a
        
        echo "=== Health Check ==="
        curl -v http://localhost:5001/api/v1/covid/health || echo "Health check failed"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          integration_report.html
          
    - name: Cleanup
      if: always()
      run: |
        docker compose -f compose.yml down -v
